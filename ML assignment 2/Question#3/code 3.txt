# -*- coding: utf-8 -*-
"""
Created on Sun Jan 19 15:36:15 2020

@author: Sheikh
"""

# Polynomial Regression

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Importing the dataset
dataset = pd.read_csv('global_co2.csv')
X = dataset.iloc[221:, 0:1].values
y = dataset.iloc[221:, 1:2].values

# Splitting the dataset into the Training set and Test set
"""from sklearn.cross_validation import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)"""


# Fitting Linear Regression to the dataset
from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(X, y)

# Fitting Polynomial Regression to the dataset
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree = 4)
X_poly = poly_reg.fit_transform(X)
poly_reg.fit(X_poly, y)
lin_reg_2 = LinearRegression()
lin_reg_2.fit(X_poly, y)

# Visualising the Linear Regression results
plt.scatter(X, y, color = 'red')
plt.plot(X, lin_reg.predict(X), color = 'blue')
plt.title('annual temp of 2 industries (Linear Regression)')
plt.xlabel('years')
plt.ylabel('avg temps')
plt.show()

# Visualising the Polynomial Regression results
plt.scatter(X, y, color = 'red')
plt.plot(X, lin_reg_2.predict(poly_reg.fit_transform(X)), color = 'blue')
plt.title('annual temp of 2 industries (Polynomial Regression)')
plt.xlabel('years')
plt.ylabel('avg temps')
plt.show()

# Visualising the Polynomial Regression results (for higher resolution and smoother curve)
X_grid = np.arange(min(X), max(X), 0.1)
X_grid = X_grid.reshape((len(X_grid), 1))
plt.scatter(X, y, color = 'red')
plt.plot(X_grid, lin_reg_2.predict(poly_reg.fit_transform(X_grid)), color = 'blue')
plt.title('annual temp of 2 industries (Polynomial Regression)')
plt.xlabel('years')
plt.ylabel('avg temps')
plt.show()

# Predicting a new result with Linear Regression
lin_reg.predict([[2011]])
lin_reg.predict([[2012]])
lin_reg.predict([[2013]])
print('prediction of co2 in 2011 using (linear reg)')
print (lin_reg.predict([[2011]]))
print('prediction of co2 in 2012 using (linear reg)')
print (lin_reg.predict([[2012]]))
print('prediction of co2 in 2013 using (linear reg)')
print (lin_reg.predict([[2013]]))
# Predicting a new result with Polynomial Regression
lin_reg_2.predict(poly_reg.fit_transform([[2011]]))
lin_reg_2.predict(poly_reg.fit_transform([[2012]]))
lin_reg_2.predict(poly_reg.fit_transform([[2013]]))
print ('prediction of co2 in 2011 using (poly reg)')
print (lin_reg_2.predict(poly_reg.fit_transform([[2011]])))
print ('prediction of co2 in 2012 using (poly reg)')
print (lin_reg_2.predict(poly_reg.fit_transform([[2012]])))
print ('prediction of co2 in 2013 using (poly reg)')
print (lin_reg_2.predict(poly_reg.fit_transform([[2013]])))


#error ratio ####
 
from sklearn import metrics 
print('Mean Absolute Error:', metrics.mean_absolute_error(X ,y))
print('Mean Square Error:', metrics.mean_squared_error(X ,y))
print('Root Mean Square Error:', np.sqrt(metrics.mean_squared_error(X ,y)))